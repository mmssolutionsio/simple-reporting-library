@use 'sass:map';
@use 'variables';
@use 'functions';
@use '../grid';
@use '../system';

@mixin margin($spacer) {
  margin: functions.get($spacer);
}

@mixin margin-block($spacer) {
  margin-block: functions.get($spacer);
}

@mixin margin-inline($spacer) {
  margin-inline: functions.get($spacer);
}

@mixin margin-top($spacer) {
  margin-block-start: functions.get($spacer);
}

@mixin margin-right($spacer) {
  margin-inline-end: functions.get($spacer);
}

@mixin margin-bottom($spacer) {
  margin-block-end: functions.get($spacer);
}

@mixin margin-left($spacer) {
  margin-inline-start: functions.get($spacer);
}

@mixin padding($spacer) {
  padding: functions.get($spacer);
}

@mixin padding-block($spacer) {
  padding-block: functions.get($spacer);
}

@mixin padding-inline($spacer) {
  padding-inline: functions.get($spacer);
}

@mixin padding-top($spacer) {
  padding-block-start: functions.get($spacer);
}

@mixin padding-right($spacer) {
  padding-inline-end: functions.get($spacer);
}

@mixin padding-bottom($spacer) {
  padding-block-end: functions.get($spacer);
}

@mixin padding-left($spacer) {
  padding-inline-start: functions.get($spacer);
}

@mixin gap($spacer) {
  gap: functions.get($spacer);
}

@mixin row-gap($spacer) {
  row-gap: functions.get($spacer);
}

@mixin column-gap($spacer) {
  column-gap: functions.get($spacer);
}

@each $spacer, $spacerValue in variables.$spacer {
  $varName: #{variables.$variable-prefix}spacer-#{$spacer};
  @include system.add-root-style(
    $varName,
    system.size-unit(map.get($spacerValue, size))
  );
  @if map.has-key($spacerValue, media) {
    @each $breakpoint, $breakpointValue in map.get($spacerValue, media) {
      @if $breakpoint == print {
        @include system.add-root-style(
          $varName,
          system.size-unit(map.get($spacerValue, size), in)
        );
      } @else if $breakpoint == up {
        @each $upBreakpoint, $upBreakpointValue in $breakpointValue {
          @include system.add-root-style(
            $varName,
            system.size-unit($upBreakpointValue),
            $upBreakpoint,
            up
          );
        }
      } @else if $breakpoint == down {
        @each $downBreakpoint, $downBreakpointValue in $breakpointValue {
          @include system.add-root-style(
            $varName,
            system.size-unit($downBreakpointValue),
            $downBreakpoint,
            down
          );
        }
      } @else {
        @include system.add-root-style(
          $varName,
          system.size-unit($breakpointValue),
          $breakpoint
        );
      }
    }
  }
}

@mixin core-styles {
  @at-root {
    @each $spacer, $spacerValue in variables.$spacer {
      .#{variables.$class-prefix}ma-none {
        margin: 0;
      }
      .#{variables.$class-prefix}my-none {
        margin-block: 0;
      }
      .#{variables.$class-prefix}mx-none {
        margin-inline: 0;
      }
      .#{variables.$class-prefix}mt-none {
        margin-block-start: 0;
      }
      .#{variables.$class-prefix}mr-none {
        margin-inline-end: 0;
      }
      .#{variables.$class-prefix}mb-none {
        margin-block-end: 0;
      }
      .#{variables.$class-prefix}ml-none {
        margin-inline-start: 0;
      }
      .#{variables.$class-prefix}ma-#{'' + $spacer} {
        @include margin($spacer);
      }
      .#{variables.$class-prefix}my-#{'' + $spacer} {
        @include margin-block($spacer);
      }
      .#{variables.$class-prefix}mx-#{'' + $spacer} {
        @include margin-inline($spacer);
      }
      .#{variables.$class-prefix}mt-#{'' + $spacer} {
        @include margin-top($spacer);
      }
      .#{variables.$class-prefix}mr-#{'' + $spacer} {
        @include margin-right($spacer);
      }
      .#{variables.$class-prefix}mb-#{'' + $spacer} {
        @include margin-bottom($spacer);
      }
      .#{variables.$class-prefix}ml-#{'' + $spacer} {
        @include margin-left($spacer);
      }

      .#{variables.$class-prefix}pa-none {
        padding: 0;
      }
      .#{variables.$class-prefix}py-none {
        padding-block: 0;
      }
      .#{variables.$class-prefix}px-none {
        padding-inline: 0;
      }
      .#{variables.$class-prefix}pt-none {
        padding-block-start: 0;
      }
      .#{variables.$class-prefix}pr-none {
        padding-inline-end: 0;
      }
      .#{variables.$class-prefix}pb-none {
        padding-block-end: 0;
      }
      .#{variables.$class-prefix}pl-none {
        padding-inline-start: 0;
      }
      .#{variables.$class-prefix}pa-#{'' + $spacer} {
        @include padding($spacer);
      }
      .#{variables.$class-prefix}py-#{'' + $spacer} {
        @include padding-block($spacer);
      }
      .#{variables.$class-prefix}px-#{'' + $spacer} {
        @include padding-inline($spacer);
      }
      .#{variables.$class-prefix}pt-#{'' + $spacer} {
        @include padding-top($spacer);
      }
      .#{variables.$class-prefix}pr-#{'' + $spacer} {
        @include padding-right($spacer);
      }
      .#{variables.$class-prefix}pb-#{'' + $spacer} {
        @include padding-bottom($spacer);
      }
      .#{variables.$class-prefix}pl-#{'' + $spacer} {
        @include padding-left($spacer);
      }

      .#{variables.$class-prefix}gap-none {
        gap: 0;
      }
      .#{variables.$class-prefix}gap-#{'' + $spacer} {
        @include gap($spacer);
      }
      .#{variables.$class-prefix}row-gap-none {
        row-gap: 0;
      }
      .#{variables.$class-prefix}row-gap-#{'' + $spacer} {
        @include row-gap($spacer);
      }
      .#{variables.$class-prefix}column-gap-none {
        column-gap: 0;
      }
      .#{variables.$class-prefix}column-gap-#{'' + $spacer} {
        @include column-gap($spacer);
      }
    }
  }
}
