@use 'sass:map';
@use 'sass:string';
@use 'variables';
@use 'functions';
@use '../system';

@mixin set($colorName, $value, $media: false) {
  @if not map.has-key(variables.$colors, $colorName) {
    @error "Invalid color \"#{$colorName}\" specified! Choose one of #{map.keys(variables.$colors)}";
  }
  @if $media {
    --#{variables.$variable-prefix}color-#{"" + $colorName}-#{$media}: #{$value};
  } @else {
    --#{variables.$variable-prefix}color-#{"" + $colorName}: #{$value};
  }
}

@each $colorName, $colors in variables.$colors {
  @include system.add-root-style(
    #{variables.$variable-prefix}color-#{'' + $colorName},
    map.get($colors, color)
  );
}

@mixin core-styles {
  @at-root {
    @each $colorName, $colors in variables.$colors {
      .#{variables.$class-prefix}color-#{'' + $colorName} {
        color: functions.get($colorName);
      }
      $onKey: 'on-' + $colorName;
      @if string.index($colorName, 'on-') != 1 {
        .#{variables.$class-prefix}bg-#{'' + $colorName} {
          background-color: functions.get($colorName);
          @if map.has-key(variables.$colors, $onKey) {
            color: functions.get($onKey);
          }
        }
      }
    }
  }
  .#{variables.$class-prefix}bg-transparent {
    background-color: transparent;
  }
}
